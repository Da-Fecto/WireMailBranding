<?php

/**
 * ProcessWire 'Wire Mail Branding' module
 *
 * @pakage WireMailBranding
 * @author Â©2015 Martijn Geerts (Calago) mgeerts@calago.nl
 *
 * Thanks @John Reeve & the people at Pelago for ceating & maintaining Emogrifier
 * Thanks @Ryan for your recommendations!
 *
 * ProcessWire 2.x
 * Copyright (C) 2014 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://processwire.com
 *
 */

class WireMailBranding extends WireMail implements Module, ConfigurableModule {

    // Return info about this module
    public static function getModuleInfo() {
        return array(
            'title' => 'Mail Branding',
            'summary' => __('Add a wrapper around bodyHTML.'),
            'version' => '0.1.3',
            'author' => 'Martijn Geerts (Calago)',
            'icon' => 'envelope-o',
            'autoload' => true,
            'singular' => true,
            'requires' => array('PHP>=5.4.0', 'ProcessWire>=2.5.27'),
        );
    }

    /**
     * Hooks
     *
     * @return void
     */
    public function init() {
        $this->addHook("WireMail::template", $this, "hookMethodTemplate");
        $this->addHook("WireMail::inlineCSS", $this, "hookMethodInlineCSS");
        $this->addHookBefore('WireMail::send', $this, 'beforemailSend');
    }

    /**
     * Default configuration for this module
     *
     * @return array
     */
    public function getDefaultData() {
        return array(
            'template' => wire('config')->urls->get($this->className()) . 'example/wrapper.php',
            'inlineCSS' => 0,
        );
    }

    /**
     * Populate the default data
     *
     * @return void
     */
    public function __construct() {
        foreach($this->getDefaultData() as $key => $value) {
            $this->$key = $value;
        }
    }

    /**
     * Path given with the WireMail call set to $this->data['template']. (Hooked)
     *
     * @return void
     */
    private function hookMethodTemplate(HookEvent $event) {
        $this->set('template', $event->arguments(0));
    }

    /**
     * Set Emogrifier CSS inliner from WireMail. (0, bodyHTML, wrapper) (Hooked)
     *
     * @return void
     */
    private function hookMethodInlineCSS(HookEvent $event) {
        $this->set('inlineCSS', $event->arguments(0));
    }

    /**
     * Returns valid template path
     *
     * @return mixed string / boolean false
     */
    private function getWrapperPath($abs_url = '') {
        if (!$abs_url) return false;
        $file = rtrim(wire('config')->paths->root, '/') . $abs_url;
        if (is_file($file)) return $file;
        wire('log')->save('errors', sprintf("Mail template doesn't exist on %s.", $abs_url));
        return false;
    }

    /**
     * Capture processed file so it can be assigned to a variable
     *
     * @return string
     */
    private function getContent($file) {
        if (!is_file($file)) return '';
        ob_start();
        include($file);
        return ob_get_clean();
    }

    /**
     * Returns a valid template file
     *
     * @property string $path Path to template
     * @property bool $return When set to false doesn't return the markup.
     * @return mixed string / boolean
     */
    private function getWrapperContent($path = '', $return = true) {
        if (!$path) return false;
        $content = $this->getContent($path);
        if (strpos($content, '{bodyHTML}') === false) {
            wire('log')->save('errors', "Mail template doesn't contain the {bodyHTML} tag.");
            return false;
        }

        return $return ? $content : true;
    }

    /**
     * Return CSS when given the path to the wrapper.
     *
     * @property string $path Path to wrapper
     * @return string CSS content
     */
    protected function getCSSContent($path = '') {
        if (!$path) return false;
        $info = pathinfo($path);
        $file = $info['dirname'] . '/' . $info['filename'] . '.css';
        return $this->getContent($file);
    }

    /**
     * Hook handling
     *
     * @property HookEvent $event
     * @return void
     */
    public function beforemailSend(HookEvent $event) {
        // WireMail instance
        $wireMail = $event->object;
        // Get the template
        $path = $this->getWrapperPath($this->data['template']);
        if (!$path) return;
        $wrapper = $this->getWrapperContent($path);
        if (!$wrapper) return;
        // Add bodyHTML to $content wrapper and set to bodyHTML
        $bodyHTML = $wireMail->bodyHTML;
        $bodyHTML = $bodyHTML ? $bodyHTML : $wireMail->mail['bodyHTML'];
        if (!$bodyHTML) return;
        // bodyHTML/wrapper/0
        $inlineCSS = $this->inlineCSS;

        // Inliner disabled
        if ($inlineCSS !== 'bodyHTML' && $inlineCSS !== 'wrapper') {
            $wireMail->bodyHTML(str_replace('{bodyHTML}', $bodyHTML, $wrapper));
            return;
        }

        // Don't use Emogrifier (Emogrifier needs mbstring)
        if (!extension_loaded('mbstring')) {
            $wireMail->bodyHTML(str_replace('{bodyHTML}', $bodyHTML, $wrapper));
            wire('log')->save('errors', "WireMailBranding needs the PHP mbstring extension.");
            return;
        }

        $cssContent = $this->getCSSContent($path);

        // We have no CSS, nothing to inline
        if (!strlen($cssContent)) {
            $wireMail->bodyHTML(str_replace('{bodyHTML}', $bodyHTML, $wrapper));
            return;
        }

        if ($inlineCSS === 'bodyHTML') {
            $bodyHTML = $this->emogrifier($bodyHTML, $cssContent, $inlineCSS);
            $bodyHTML = str_replace('{bodyHTML}', $bodyHTML, $wrapper);
        } else if ($inlineCSS === 'wrapper') {
            $wrapped = str_replace('{bodyHTML}', $bodyHTML, $wrapper);
            $bodyHTML = $this->emogrifier($wrapped, $cssContent, $inlineCSS);
        }

        $wireMail->bodyHTML($bodyHTML);

    }

    /**
     * Get inner contents of html element
     *
     * @property string $markup Markup
     * @property string $element Element to get inner content from.
     * @return string Inner content.
     */
    public function getInnerContent($markup, $element = 'body') {
        $html = new DOMDocument;
        // Prevent errors
        libxml_use_internal_errors(true);
        $html->loadHTML($markup);
        libxml_use_internal_errors(false);
        $body = $html->getElementsByTagName($element)->item(0);
        // return empty string when not found
        if (!$body->length) return '';
        $result = new DOMDocument;
        foreach ($body->childNodes as $child) {
            $result->appendChild($result->importNode($child, true));
        }
        return $result->saveHTML();
    }

    /**
     * Emogrifier
     *
     * Emogrifier automagically transmogrifies your HTML by parsing your CSS and inserting
     * your CSS definitions into tags within your HTML based on your CSS selectors.
     * Emogrifier is written by John Reeve and maintained by the good people at Pelago.
     * More info AT pelagodesign DOT com (Big thanks to John Reeve & the people at Pelago)
     *
     * more info: https://github.com/jjriv/emogrifier
     *
     * @property string $html
     * @property string $css
     * @return string $html
     *
     */
    public function emogrifier($html = '', $css = '', $inlineCSS) {
        if (!$html) return false;
        if (!$css) return $html;
        require_once(__dir__ . '/emogrifier/Classes/Emogrifier.php');
        $emogrifier =  new \Pelago\Emogrifier();
        $emogrifier->setHtml($html);
        $emogrifier->setCss($css);
        $emogrifier->disableInvisibleNodeRemoval();
        if ($inlineCSS === 'bodyHTML') {
            return $emogrifier->emogrifyBodyContent();
        } else if ($inlineCSS === 'wrapper') {
            return $emogrifier->emogrify();
        }
    }

    /**
     * Install defaults
     *
     * @return void
     */
    public function ___install() {
        $this->wire('modules')->saveModuleConfigData($this, $this->getDefaultData());
    }

    /**
     * Recommendation from ryan.
     *
     */
    public function ___send() {
        return parent::___send();
    }

    /**
     * Module configuration
     *
     * @param array $data
     * @return InputfieldWrapper
     */
    public function getModuleConfigInputfields(array $data) {

        if (isset($data['reset']) && $data['reset'] === 1) {
            $defaults = $this->getDefaultData();
            $data['template'] = $defaults['template'];
            $this->wire('modules')->saveModuleConfigData($this, $data);
        }

        $data = array_merge($this->getDefaultData(), $data);
        $error = false;
        $notes = '';
        $path = $this->getWrapperPath($data['template']);
        $content = $this->getWrapperContent($path, false);
        $stored = $this->wire('modules')->getModuleConfigData($this);

        if (!$data['template']) {
            $icon = 'wrench';
            $notes = $this->_("Set the email wrapper template in your wireMail call. (see example)");
        } else if (!$path && !$content) {
            $error = $this->_("Absolute url to the template is not correct.");
            $icon = 'chain-broken';
        } else if ($path && !$content) {
            $error = $this->_("Mail template doesn't contain the {bodyHTML} tag.");
            $icon = 'exclamation-triangle';
        } else if ($path && $content && $stored['template'] !== $data['template']) {
            // This should not be triggered... (Deprecated)
            $error = 'error';
            $icon = 'exclamation-triangle';
            $notes =
                $this->_("Template file path is not yet saved.") . ' ' .
                $this->_("Press submit to save the module configuration.");
        } else if ($path && $content) {
            $icon = 'thumbs-up';
            $notes = $this->_("Lookin' Good!");
        }

        // this is a container for fields, basically like a fieldset
        $wrapper = new InputfieldWrapper();

        $fs = $this->wire('modules')->get('InputfieldFieldset');
        $fs->label = $this->_("Mail Branding");
        $fs->description =
            $this->_("Create an email template and place the {bodyHTML} tag in it.") . "\n" .
            $this->_("The tag will be replaced with the contents of \$mail->bodyHTML. (see example below)") . "\n" .
            $this->_("WireMailBranding will only work when using bodyHTML method from your wireMail call.");
        $field = $this->wire('modules')->get('InputfieldMarkup');
        $field->icon = 'cubes';
        $field->label = $this->_("Example");
        $field->value =
            '<code style="font-size: 14px; color: #666; line-height: 135%; font-family: Consolas, \'Lucida Console\', \'DejaVu Sans Mono\', monospace;"><br>' .
            '&lt;?php<br>' .
            '$mail = wireMail();<br>' .
            '$mail->to("some.user@some-domain.ext")->from("you@your-domain.ext");<br>' .
            '$mail->subject("Mail Subject");<br>' .
            '<span style="color: #DB1174;">// ' . $this->_("Path to wrapper") . '</span><br>' .
            '$mail->template("/site/templates/template_wrapper.php");<br>' .
            '<span style="color: #DB1174;">// ' .
                $this->_("Posible values for the CSS inliner") . ' ' .
                $this->_("( 0 / bodyHTML / wrapper )") .
            '</span><br>' .
            '$mail->inlineCSS("bodyHTML");<br>' .
            '$mail->bodyHTML("&lt;p&gt;Markup to replace the tag.&lt;/p&gt;");<br>' .
            '$mail->send();<br>' .
            '</code>';
        $fs->append($field);
        $wrapper->append($fs);

        $field = $this->wire('modules')->get('InputfieldText');
        $field->label = $this->_("Default Wrapper");
        $field->description = $this->_("Absolute URL to the email wrapper template.");
        $field->icon = $icon;
        $field->name = 'template';
        $field->value = $data[$field->name];
        $field->notes = $notes;
        $field->columnWidth = 75;
        if ($error) $field->error($error);
        $wrapper->append($field);

        $field = $this->wire('modules')->get('InputfieldCheckbox');
        $field->label = $this->_("Reset URL to default");
        $field->label2 = $this->_("Reset tot default");
        $field->icon = 'refresh';
        $field->name = 'reset';
        $field->columnWidth = 25;
        $wrapper->append($field);

        $error = null;
        if (!extension_loaded('mbstring')) {
            $error = $this->_("Emogrifier needs the PHP mbstring extension. CSS inline support is disabled.");
        }

        $fs = $this->wire('modules')->get('InputfieldFieldset');
        $fs->label = $this->_("Emogrifier (CSS inliner)");
        $fs->description =
            $this->_("Emogrifier converts CSS styles into inline style attributes in your HTML markup.") .
            "\n" .
            $this->_("more information about [Emogrifier](https://github.com/jjriv/emogrifier) on github.");
        $field = $this->wire('modules')->get('InputfieldRadios');
        $field->icon = 'compress';
        $field->label = $this->_("Enable Emogrifier");
        $field->description =
            $this->_("To enable emogrifier place a css file with the same name as the wrapper in the same folder but end the file with the .css extension.") .
            "\n" .
            $this->_("To overwrite this setting with the API see the example.");
        $field->name = 'inlineCSS';
        $field->value = $data[$field->name];
        $field->addOption('0', $this->_("Disabled"));
        if (!$error) {
            $field->addOption('bodyHTML', $this->_("Apply only on bodyHTML."));
            $field->addOption('wrapper', $this->_("Run over the complete HTML."));
            $field->notes = $this->_("To overwrite this setting with the API, see example.");
        } else {
            $field->error($error);
        }
        extension_loaded('mbstring') ? '' : $field->error($this->_("Emogrifier needs the mbstring PHP extension."));
        $fs->append($field);
        $wrapper->append($fs);

        return $wrapper;
    }
}
